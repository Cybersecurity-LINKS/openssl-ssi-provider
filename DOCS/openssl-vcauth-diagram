@startuml
participant S_SERVER as app
participant LIBSSL as lssl
participant LIBCRYPTO as lcrypto
participant DEFAULT_PROVIDER as dfltprov
participant SSI_PROVIDER as ssiprov
participant IDENTITY_CBINDINGS as id

note over app, id: The server first loads its VC and DID into EVP_PKEY *VC and EVP_PKEY *did that are stored in an appropriate data structure in LIBSSL

group LOAD DID
app -> app: load_key(did_document.pem)
app -> lcrypto: OSSL_DECODER_from_bio()
lcrypto -> dfltprov: pem2der_decode()
group DECODE_OP
lcrypto -> ssiprov: PrivateKeyInfo_der_to_vc_decode()
end
group KEYMGMT_OP
ssiprov -> ssiprov: vc_load()
ssiprov -> id: did_set()
end
end

group LOAD VC
app -> app: load_key(jwt.pem)
app -> lcrypto: OSSL_DECODER_from_bio(jwt.pem)
lcrypto -> dfltprov: pem2der_decode()
group DECODE_OP
lcrypto -> ssiprov: PublicKeyInfo_der_to_vc_decode()
end
group KEYMGMT_OP
ssiprov -> ssiprov: vc_load()
ssiprov -> id: vc_set()
end
end 

note over app, id: The handshake has started and now the server sends its VC to the client

group CONSTRUCT SERVER CERTIFICATE
lssl -> lssl: tls_construct_server_certificate(*vc)
lssl -> lcrypto: OSSL_ENCODER_to_bio(*vc)
group ENCODE_OP
lcrypto -> ssiprov: vc_to_SubjectPublicKeyInfo_der_encode()
ssiprov -> id: get_vc()
end
id -> id: get_vc()
id -> ssiprov: return const char *vc
ssiprov -> ssiprov: BIO_write()
note right: Writes data on the BIO and \nthat will later be sent over the network
end

note over app, id: After the Certificate message the server sends the Certificate Verify message by signing all the handshake message with the private key associated to its DID Document

group CONSTRUCT SERVER CERTIFICATE VERIFY
lssl -> lssl: tls_construct_cert_verify(*vc)
lssl -> lcrypto: EVP_DigestSignInit(*vc)
group SIGNATURE_OP
lcrypto -> ssiprov: vc_sig_newctx(signature->provider)
note right: Saves in *vc_sig_ctx the Wallet
lcrypto -> ssiprov: vc_digest_sign_init(*vc_sig_ctx, *did) 
note right: Saves in vc_sig_ctx the DID needed to perform the signature
end
lssl -> lcrypto: EVP_DigestSign(*vc)
group SIGNATURE_OP
lcrypto -> ssiprov: vc_digest_sign()
ssiprov -> id: did_sign()
end
end

note over app, id: The server now processes the Client Certificate

group PROCESS CLIENT CERTIFICATE
lssl -> lssl: tls_process_client_certificate(char *vc)
lssl -> lcrypto: OSSL_DECODER_from_bio(*vc)
group DECODE_OP
lcrypto -> ssiprov: SubjectPublicKeyInfo_der_to_vc_decode()
group KEYMGMT_OP
ssiprov -> ssiprov: vc_load()
ssiprov -> id: set_vc()
end
end
end

note over app, id: The server now processes the Client Certificate Verify

group PROCESS CLIENT CERTIFICATE VERIFY
lssl -> lssl: tls_process_cert_verify(*vc)
lssl -> lcrypto: EVP_DigestVerifyInit(*vc)
group SIGNATURE_OP
lcrypto -> ssiprov: vc_sig_newctx(signature->provider)
note right: Saves in vc_sig_ctx the Wallet 
lcrypto -> ssiprov: vc_digest_verify_init(*vc_sig_ctx, *vc)
ssiprov -> id: vc_verify()
note right: VC verify is performed here because\n in the signature operation\n we have the wallet
end
lssl -> lcrypto: EVP_DigestVerify(*vc)
group SIGNATURE_OP
lcrypto -> ssiprov: vc_digest_verify()
ssiprov -> id: did_verify()
end
end
@enduml